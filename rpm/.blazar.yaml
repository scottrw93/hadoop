buildType: MAVEN

buildpack:
  name: Blazar-Buildpack-RPM

provides:
  - name: hadoop-rpm

depends:
  - name: apache-hadoop-build-container

buildDeps:
  - hs-build-tools
  - jdk8
  - maven3

# unlike normal maven builds, we want to use our own m2 because the build process involves
# mvn install. we don't want these installed jars to mess up the global m2 cache.
cache:
  - /root/.m2/repository

env:
  MAVEN_DIR: /opt/build-deps/maven3
  JAVA_HOME: "/opt/build-deps/jdk8"

  # MAIN_BRANCH goes to MAIN_YUM_REPO, with release hs.buildNumber
  # All others go to DEVELOP_YUM_REPO, with release hs~branch.buildNumber
  MAIN_BRANCH: "hubspot-3.3"

  # Our main branch will upload to 8/hs-hadoop.
  # All other branches (including staging) will go to 8/hs-hadoop-develop.
  MAIN_YUM_REPO: "8_hs-hadoop"
  DEVELOP_YUM_REPO: "8_hs-hadoop-develop"

  # This will be updated automatically by the "Set yum repo and package version" step below
  YUM_REPO_UPLOAD_OVERRIDE: "UPDATE ME"

  # The entry point script for the rpm build
  RPM_BUILD_COMMAND: "./build_with_docker.sh"

before:
  - description: Detect HADOOP_VERSION
    commands:
      - |
          # the pom.xml has an invalid xml namespace, so just remove that so xmllint can parse it.
          cat $WORKSPACE/pom.xml | sed '15 s/xmlns=".*"//g' > pom.xml.tmp
          HADOOP_VERSION=$(echo "cat /project/version/text()" | xmllint --nocdata --shell pom.xml.tmp | sed '1d;$d')
          rm pom.xml.tmp

          # sanity check that we've got some that looks right. it wouldn't be the end of the world if we got it wrong, but 
          # will help avoid confusion.
          if [[ ! "$HADOOP_VERSION" =~ 3\.[0-9]+\.[0-9]+ ]]; then
              echo "Unexpected HBASE_Version extracted from pom.xml. Got $HADOOP_VERSION but expected a string like '3.3.1', with three numbers separated by decimals, the first numbers being 3."
              exit 1
          fi

          echo "Building Hadoop version $HADOOP_VERSION"
          echo "export HADOOP_VERSION='$HADOOP_VERSION'" >> $BUILD_COMMAND_RC_FILE

  - description: Set yum repo and package version
    commands:
      - |
          # We want our resulting version to follow this schema:
          # master branch: {hadoop_version}-hs.{build_number}.el8
          # other branches: {hadoop_version}-hs~{branch_name}.{build_number}.el8, where branch_name substitutes underscore for non-alpha-numeric characters

          release_prefix="hs"

          if [ "$GIT_BRANCH" = "$MAIN_BRANCH" ]; then
              repo=$MAIN_YUM_REPO
          else
              release_prefix="${release_prefix}~${GIT_BRANCH//[^[:alnum:]]/_}"
              repo=$DEVELOP_YUM_REPO
          fi

          release="${release_prefix}.${BUILD_NUMBER}"

          # exports in this rc file are available in all steps
          echo "export PKG_RELEASE=$release" >> $BUILD_COMMAND_RC_FILE
          echo "export YUM_REPO_UPLOAD_OVERRIDE=$repo" >> $BUILD_COMMAND_RC_FILE

          echo "Will upload package with release $release to $repo"

buildResources:
  cpus: 8
  memoryMb: 20480

stepActivation:
  uploadRpms:
    branchRegexes: ['.*']

buildTimeoutOverrideMinutes: 120
